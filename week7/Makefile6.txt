# Makefile for Ebola genome alignment project

# Variables
ACC ?= AF086833
NAME ?= ebola-1976
SRR ?= SRR35257019
SPOTS=1000
THREADS=4
BAM_DIR=bam
BG=coverage/depth.bedgraph
BIGWIG=coverage/depth.bw
CHROMSIZES=refs/${NAME}.chrom.sizes
FAI=${REF}.fai
COVERAGE=coverage/depth.txt

REF=refs/${NAME}.fa
R1=reads/${SRR}_1.fastq
R2=reads/${SRR}_2.fastq
BAM=bam/${SRR}.bam


SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

all: refs fastq index align stats

usage:
	@echo "Usage: make [all|refs|fastq|index|align|stats|coverage|clean]"

refs:
	mkdir -p $(dir ${REF})
	bio fetch ${ACC} --format fasta > ${REF}
	seqkit stats ${REF}

fastq:
	mkdir -p $(dir ${R1})
	fastq-dump -X ${SPOTS} --split-files -O reads ${SRR}
	seqkit stats ${R1} ${R2}

index:
	bwa index ${REF}

align:
	mkdir -p $(dir ${BAM})
	bwa mem -t 4 ${REF} ${R1} ${R2} | samtools sort -o ${BAM}
	samtools index ${BAM}

stats:
	samtools flagstat ${BAM}
	samtools coverage ${BAM}


clean:
	rm -rf refs/* reads/* bam/* coverage.txt coverage_plot.png


# Get percent aligned and expected coverage
alignment_summary: ${BAM}
	@echo "Generating alignment summary..."
	@total_reads=$$(samtools view -c -f 1 ${BAM}); \
	aligned_reads=$$(samtools view -c -F 4 ${BAM}); \
	perc=$$(awk -v a=$$aligned_reads -v t=$$total_reads 'BEGIN { printf("%.2f", (a/t)*100) }'); \
	echo "Total Reads: $$total_reads"; \
	echo "Aligned Reads: $$aligned_reads"; \
	echo "% Aligned: $$perc%"

	@echo ""
	@echo "Expected Coverage Calculation (~10x genome):"
	@echo "Genome size: 19,000 bp"
	@echo "Spots downloaded: ${SPOTS}"
	@echo "Read length ~200 bp/spot"
	@echo "Expected bases = ${SPOTS} * 200 = "$$((${SPOTS} * 200))" bases"
	@echo "Expected coverage = total bases / genome size = "$$((${SPOTS} * 200 / 19000))"x"


# ----------------- align -> BAM + index -----------------
align: index fastq
	mkdir -p $(BAM_DIR)
	# align, sort, write BAM
	bwa mem -t $(THREADS) $(REF) $(R1) $(R2) | samtools sort -@ $(THREADS) -o $(BAM)
	# index BAM
	samtools index $(BAM)

# ----------------- bigWig creation -----------------
# requires bedtools and bedGraphToBigWig (UCSC)
bigwig: align
	mkdir -p bigwig
	# compute genome-wide bedGraph (depth per position)
	bedtools genomecov -ibam $(BAM) -bg > $(BG)
	# sort bedGraph by chrom/pos (bedGraphToBigWig expects sorted)
	sort -k1,1 -k2,2n $(BG) > $(BG).sorted
	# ensure chromosome sizes exist (from faidx)
	if [ ! -s $(CHROMSIZES) ]; then cut -f1,2 $(FAI) > $(CHROMSIZES); fi
	# convert to bigWig
	bedGraphToBigWig $(BG).sorted $(CHROMSIZES) $(BIGWIG)
	@echo "Created $(BIGWIG)"

# ----------------- coverage / depth -----------------
$(COVERAGE): $(BAM)
	mkdir -p coverage
	samtools depth $(BAM) > $(COVERAGE)

coverage: $(COVERAGE)
	@echo "Summary stats from $(COVERAGE):"
	@awk 'BEGIN {total=0; n=0; max=0; min=1e9} {total+=$3; n++; if($3>max) max=$3; if($3<min) min=$3} END {printf \"Avg coverage: %.2f\nMax: %d\nMin: %d\nPositions: %d\n\", total/n, max, min, n}' $(COVERAGE)
	@echo "Top 5 highest coverage positions:"
	@sort -k3,3nr $(COVERAGE) | head -n5

# ----------------- simple alignment stats -----------------
stats: $(BAM)
	@echo "samtools flagstat for $(BAM):"
	samtools flagstat $(BAM)
	@echo ""
	@echo "samtools coverage for $(BAM):"
	samtools coverage $(BAM)

# produce alignment summary: percent aligned, expected coverage
alignment_summary: $(BAM)
	@echo "Generating alignment summary for $(BAM):"
	@total_reads=$$(samtools view -c -f 1 $(BAM)); \
	aligned_reads=$$(samtools view -c -F 4 $(BAM)); \
	perc=$$(awk -v a=$$aligned_reads -v t=$$total_reads 'BEGIN{ if (t>0) printf(\"%.2f\", (a/t)*100) else print \"NA\" }'); \
	echo "Total reads (reads flagged as paired): $$total_reads"; \
	echo "Aligned reads (not flagged as unmapped): $$aligned_reads"; \
	echo "Percent aligned: $$perc %"
	@echo ""
	@echo "Expected coverage estimate (approx):"
	@echo "Genome size (bp): $$(awk '{s+=$2} END{print s}' $(CHROMSIZES))"
	@echo "Spots downloaded: $(SPOTS)"
	@echo "Estimated read length (bp): 200"
	@echo "Estimated total sequenced bases: "$$(($(SPOTS) * 200))
	@echo "Estimated coverage (x): "$$(($(SPOTS) * 200) / $$(awk '{s+=$2} END{print s}' $(CHROMSIZES)))
